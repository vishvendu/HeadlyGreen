package com.example.vishvendu.headlyapp.Database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUB_CATEGORY".
*/
public class SubCategoryDao extends AbstractDao<SubCategory, Long> {

    public static final String TABLENAME = "SUB_CATEGORY";

    /**
     * Properties of entity SubCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SubCategoryID = new Property(1, Long.class, "subCategoryID", false, "SUB_CATEGORY_ID");
        public final static Property SubCategoryName = new Property(2, String.class, "subCategoryName", false, "SUB_CATEGORY_NAME");
        public final static Property SubCategoryAddedDate = new Property(3, Long.class, "subCategoryAddedDate", false, "SUB_CATEGORY_ADDED_DATE");
    }

    private Query<SubCategory> category_SubCategoryIDQuery;

    public SubCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public SubCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUB_CATEGORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SUB_CATEGORY_ID\" INTEGER," + // 1: subCategoryID
                "\"SUB_CATEGORY_NAME\" TEXT," + // 2: subCategoryName
                "\"SUB_CATEGORY_ADDED_DATE\" INTEGER);"); // 3: subCategoryAddedDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUB_CATEGORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SubCategory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long subCategoryID = entity.getSubCategoryID();
        if (subCategoryID != null) {
            stmt.bindLong(2, subCategoryID);
        }
 
        String subCategoryName = entity.getSubCategoryName();
        if (subCategoryName != null) {
            stmt.bindString(3, subCategoryName);
        }
 
        Long subCategoryAddedDate = entity.getSubCategoryAddedDate();
        if (subCategoryAddedDate != null) {
            stmt.bindLong(4, subCategoryAddedDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SubCategory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long subCategoryID = entity.getSubCategoryID();
        if (subCategoryID != null) {
            stmt.bindLong(2, subCategoryID);
        }
 
        String subCategoryName = entity.getSubCategoryName();
        if (subCategoryName != null) {
            stmt.bindString(3, subCategoryName);
        }
 
        Long subCategoryAddedDate = entity.getSubCategoryAddedDate();
        if (subCategoryAddedDate != null) {
            stmt.bindLong(4, subCategoryAddedDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SubCategory readEntity(Cursor cursor, int offset) {
        SubCategory entity = new SubCategory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // subCategoryID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subCategoryName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // subCategoryAddedDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SubCategory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubCategoryID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSubCategoryName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubCategoryAddedDate(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SubCategory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SubCategory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SubCategory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "subCategoryID" to-many relationship of Category. */
    public List<SubCategory> _queryCategory_SubCategoryID(Long subCategoryID) {
        synchronized (this) {
            if (category_SubCategoryIDQuery == null) {
                QueryBuilder<SubCategory> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SubCategoryID.eq(null));
                category_SubCategoryIDQuery = queryBuilder.build();
            }
        }
        Query<SubCategory> query = category_SubCategoryIDQuery.forCurrentThread();
        query.setParameter(0, subCategoryID);
        return query.list();
    }

}
